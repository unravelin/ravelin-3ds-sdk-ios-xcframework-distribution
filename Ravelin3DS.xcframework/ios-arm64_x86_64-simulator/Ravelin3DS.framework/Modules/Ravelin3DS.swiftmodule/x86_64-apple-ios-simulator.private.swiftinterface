// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.123.8 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Ravelin3DS
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import CommonCrypto
import CoreLocation
import Foundation
import OSLog
@_exported import Ravelin3DS
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
public protocol R3DS2ProgressDialog {
  func start()
  func stop()
}
public struct R3DS2Config : Swift.Codable {
  public func jsonData() throws -> Foundation.Data
  public func params() -> [Swift.String : Any]?
  public static func readConfigFromFile(_ configFile: Swift.String) throws -> Ravelin3DS.R3DS2Config
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct R3DS2Scheme : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class R3DS2Warning {
  public init(warningId: Swift.String, message: Swift.String, severity: Ravelin3DS.R3DS2Severity)
  public func getID() -> Swift.String
  public func getMessage() -> Swift.String
  public func getSeverity() -> Ravelin3DS.R3DS2Severity
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class R3DS2ButtonCustomization : Ravelin3DS.R3DS2Customization {
  public func setBackgroundColor(hexColorCode: Swift.String) throws
  public func setDarkBackgroundColor(hexColorCode: Swift.String) throws
  public func setCornerRadius(cornerRadius: Swift.Int) throws
  public func getBackgroundColor() -> Swift.String
  public func getDarkBackgroundColor() -> Swift.String
  public func getCornerRadius() -> Swift.Int
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
public protocol R3DS2ChallengeView {
  var viewController: UIKit.UIViewController { get }
}
public let kConfigDefaultGroupName: Swift.String
@objc @_inheritsConvenienceInitializers public class R3DS2ConfigParameters : ObjectiveC.NSObject {
  @objc override dynamic public init()
  convenience public init(parameters: [Swift.String : Any]?, group: Swift.String = kConfigDefaultGroupName)
  public func addParam(group: Swift.String? = nil, paramName: Swift.String, paramValue: Swift.String) throws
  public func getParamValue(group: Swift.String? = nil, paramName: Swift.String) throws -> Swift.String?
  public func removeParam(group: Swift.String? = nil, paramName: Swift.String) throws -> Swift.String?
  public static func loadFromFile(_ configFile: Swift.String = "config") -> Ravelin3DS.R3DS2ConfigParameters
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class R3DS2Customization : ObjectiveC.NSObject, Foundation.NSCopying {
  convenience public init(with base: Ravelin3DS.R3DS2Customization)
  public func setTextFontName(fontName: Swift.String) throws
  public func setTextColor(hexColorCode: Swift.String) throws
  public func setDarkTextColor(hexColorCode: Swift.String) throws
  public func setTextFontSize(fontSize: Swift.Int) throws
  public func getTextFontName() -> Swift.String
  public func getTextColor() -> Swift.String
  public func getDarkTextColor() -> Swift.String
  public func getTextFontSize() -> Swift.Int
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init?(hexColorCode: Swift.String?)
}
@objc @_inheritsConvenienceInitializers public class R3DS2UiCustomization : ObjectiveC.NSObject, Foundation.NSCopying {
  public func setButtonCustomization(buttonCustomization: Ravelin3DS.R3DS2ButtonCustomization, buttonType: Ravelin3DS.R3DS2ButtonType) throws
  public func setButtonCustomization(buttonCustomization: Ravelin3DS.R3DS2ButtonCustomization, btnType: Swift.String) throws
  public func setToolbarCustomization(toolbarCustomization: Ravelin3DS.R3DS2ToolbarCustomization)
  public func setLabelCustomization(labelCustomization: Ravelin3DS.R3DS2LabelCustomization)
  public func setTextBoxCustomization(textBoxCustomization: Ravelin3DS.R3DS2TextBoxCustomization)
  public func getButtonCustomization(buttonType: Ravelin3DS.R3DS2ButtonType) -> Ravelin3DS.R3DS2ButtonCustomization?
  public func getButtonCustomization(btnType: Swift.String) -> Ravelin3DS.R3DS2ButtonCustomization?
  public func getToolbarCustomization() -> Ravelin3DS.R3DS2ToolbarCustomization?
  public func getLabelCustomization() -> Ravelin3DS.R3DS2LabelCustomization?
  public func getTextboxCustomization() -> Ravelin3DS.R3DS2TextBoxCustomization?
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class R3DS2ToolbarCustomization : Ravelin3DS.R3DS2Customization {
  public func setBackgroundColor(hexColorCode: Swift.String) throws
  public func setDarkBackgroundColor(hexColorCode: Swift.String) throws
  public func setHeaderText(headerText: Swift.String) throws
  public func setButtonText(buttonText: Swift.String) throws
  public func getBackgroundColor() -> Swift.String
  public func getDarkBackgroundColor() -> Swift.String
  public func getHeaderText() -> Swift.String
  public func getButtonText() -> Swift.String
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
public enum R3DS2ButtonType : Swift.Int, Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
  case SUBMIT
  case CONTINUE
  case NEXT
  case CANCEL
  case RESEND
  public typealias RawValue = Swift.String
  public var rawValue: Ravelin3DS.R3DS2ButtonType.RawValue {
    get
  }
  public init?(rawValue: Ravelin3DS.R3DS2ButtonType.RawValue)
  public typealias AllCases = [Ravelin3DS.R3DS2ButtonType]
  public static var allCases: [Ravelin3DS.R3DS2ButtonType] {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class R3DS2LabelCustomization : Ravelin3DS.R3DS2Customization {
  public func setHeadingTextColor(hexColorCode: Swift.String) throws
  public func setHeadingDarkTextColor(hexColorCode: Swift.String) throws
  public func setHeadingTextFontName(fontName: Swift.String) throws
  public func setHeadingTextFontSize(fontSize: Swift.Int) throws
  public func getHeadingTextColor() -> Swift.String
  public func getHeadingDarkTextColor() -> Swift.String
  public func getHeadingTextFontName() -> Swift.String
  public func getHeadingTextFontSize() -> Swift.Int
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class R3DS2AuthenticationResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol R3DS2Transaction {
  func getAuthenticationRequestParameters() throws -> Ravelin3DS.R3DS2AuthenticationRequestParameters
  func doChallenge(challengeParameters: Ravelin3DS.R3DS2ChallengeParameters, challengeStatusReceiver: Ravelin3DS.R3DS2ChallengeStatusReceiver, timeOut: Swift.Int, challengeView: Ravelin3DS.R3DS2ChallengeView) throws
  func getProgressView() throws -> Ravelin3DS.R3DS2ProgressDialog
  func close() throws
}
public enum R3DS2Severity : Swift.Int, Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
  case LOW
  case MEDIUM
  case HIGH
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Ravelin3DS.R3DS2Severity]
  public typealias RawValue = Swift.Int
  public static var allCases: [Ravelin3DS.R3DS2Severity] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class R3DS2Error : ObjectiveC.NSObject {
  public static func InvalidInput(message: Swift.String, cause: Swift.Error?) -> Swift.Error
  public static func SDKAlreadyInitialized(message: Swift.String, cause: Swift.Error?) -> Swift.Error
  public static func SDKNotInitialized(message: Swift.String, cause: Swift.Error?) -> Swift.Error
  public static func SDKRuntime(message: Swift.String, errorCode: Swift.String?, cause: Swift.Error?) -> Swift.Error
  @objc override dynamic public init()
  @objc deinit
}
public enum R3DS2ErrorCode : Swift.String, Swift.Equatable, Swift.Hashable, Swift.RawRepresentable {
  case transactionIsAlreadyClosed
  case challengeAlreadyInProgress
  case transactioRAVnnotBeClosedChallengeInProdgress
  case errorCreatingTransaction
  case progresViewInitializationFailed
  case noLogoImageForGivenDirectoryServerID
  case missingConfigurationForScheme
  case licenseKeyMissing
  case licenseFormatInvalid
  case licenseExpired
  case licenseSignatureInvalid
  case licenseInvalid
  case errorGettingSDKVersion
  case challengeError
  case challengeProcessingFailed
  case failedToHandleChallengeResponse
  case failedToSendChallengeRequest
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class R3DS2ChallengeParameters : ObjectiveC.NSObject {
  convenience public init(authenticationResponse authResponse: Ravelin3DS.R3DS2AuthenticationResponse?)
  public func set3DSServerTransactionID(_ threeDSServerTransactionID: Swift.String)
  public func setAcsTransactionID(_ acsTransactionID: Swift.String)
  public func setAcsRefNumber(_ acsReferenceNumber: Swift.String)
  public func setAcsSignedContent(_ acsSignedContent: Swift.String)
  public func setThreeDSRequestorAppURL(_ threeDSRequestorAppURL: Swift.String)
  public func get3DSServerTransactionID() -> Swift.String
  public func getAcsTransactionID() -> Swift.String
  public func getAcsRefNumber() -> Swift.String
  public func getAcsSignedContent() -> Swift.String
  public func getThreeDSRequestorAppURL() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class R3DS2AuthenticationRequestParameters : ObjectiveC.NSObject {
  public init(sdkTransactionId: Swift.String, deviceData: Swift.String, sdkEphemeralPublicKey: Swift.String, sdkAppId: Swift.String, sdkReferenceNumber: Swift.String, messageVersion: Swift.String, directoryServerId: Swift.String) throws
  public func getDeviceData() -> Swift.String
  public func getSDKTransactionId() -> Swift.String
  public func getSDKAppID() -> Swift.String
  public func getSDKReferenceNumber() -> Swift.String
  public func getSDKEphemeralPublicKey() -> Swift.String
  public func getMessageVersion() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class R3DS2TextBoxCustomization : Ravelin3DS.R3DS2Customization {
  public func setBorderWidth(borderWidth: Swift.Int) throws
  public func setBorderColor(hexColorCode: Swift.String) throws
  public func setDarkBorderColor(hexColorCode: Swift.String) throws
  public func setCornerRadius(cornerRadius: Swift.Int) throws
  public func getBorderWidth() -> Swift.Int
  public func getBorderColor() -> Swift.String
  public func getDarkBorderColor() -> Swift.String
  public func getCornerRadius() -> Swift.Int
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
public protocol R3DS2ChallengeStatusReceiver : AnyObject {
  func completed(completionEvent: Ravelin3DS.R3DS2CompletionEvent)
  func cancelled()
  func timedout()
  func protocolError(protocolErrorEvent: Ravelin3DS.R3DS2ProtocolErrorEvent)
  func runtimeError(runtimeErrorEvent: Ravelin3DS.R3DS2RuntimeErrorEvent)
}
@objc public class R3DS2RuntimeErrorEvent : ObjectiveC.NSObject {
  public init(_ errorCode: Swift.String?, _ errorMessage: Swift.String)
  public func getErrorCode() -> Swift.String?
  public func getErrorMessage() -> Swift.String
  @objc deinit
}
@objc public class R3DS2ErrorMessage : ObjectiveC.NSObject {
  public init(transactionID: Swift.String, errorCode: Swift.String, errorComponent: Swift.String, errorDescription: Swift.String, errorDetail: Swift.String, errorMessageType: Swift.String?, messageVersionNumber: Swift.String)
  public func getTransactionID() -> Swift.String
  public func getErrorCode() -> Swift.String
  public func getErrorComponent() -> Swift.String
  public func getErrorDescription() -> Swift.String
  public func getErrorDetail() -> Swift.String
  public func getErrorMessageType() -> Swift.String
  public func getMessageVersionNumber() -> Swift.String
  @objc deinit
}
@objc public class R3DS2ProtocolErrorEvent : ObjectiveC.NSObject {
  public init(_ sdkTransactionID: Swift.String, _ errorMessage: Ravelin3DS.R3DS2ErrorMessage)
  public func getErrorMessage() -> Ravelin3DS.R3DS2ErrorMessage
  public func getSDKTransactionID() -> Swift.String
  @objc deinit
}
@objc public class R3DS2CompletionEvent : ObjectiveC.NSObject {
  public init(_ sdkTransactionID: Swift.String, _ transactionStatus: Swift.String)
  public func getSDKTransactionID() -> Swift.String
  public func getTransactionStatus() -> Swift.String
  @objc deinit
}
public protocol R3DS2Service {
  func initialize(configParameters: Ravelin3DS.R3DS2ConfigParameters, locale: Swift.String?, uiCustomization: Ravelin3DS.R3DS2UiCustomization?) throws
  func initialize(configParameters: Ravelin3DS.R3DS2ConfigParameters, locale: Swift.String?, uiCustomization: Ravelin3DS.R3DS2UiCustomization?, completion: ((Swift.Bool) -> Swift.Void)?) throws
  func createTransaction(directoryServerID: Swift.String, messageVersion: Swift.String?) throws -> Ravelin3DS.R3DS2Transaction
  func getWarnings() throws -> [Ravelin3DS.R3DS2Warning]
  func getSDKVersion() throws -> Swift.String
  func cleanup() throws
}
@objc @_inheritsConvenienceInitializers public class R3DS2ServiceSDK : ObjectiveC.NSObject, Ravelin3DS.R3DS2Service {
  @objc override dynamic public init()
  public init(bundle: Foundation.Bundle)
  public func initialize(configParameters: Ravelin3DS.R3DS2ConfigParameters, locale: Swift.String?, uiCustomization: Ravelin3DS.R3DS2UiCustomization?, completion: ((Swift.Bool) -> Swift.Void)?) throws
  public func initialize(configParameters: Ravelin3DS.R3DS2ConfigParameters, locale: Swift.String?, uiCustomization: Ravelin3DS.R3DS2UiCustomization?) throws
  public func createTransaction(directoryServerID directoryServerId: Swift.String, messageVersion: Swift.String?) throws -> Ravelin3DS.R3DS2Transaction
  public func getWarnings() throws -> [Ravelin3DS.R3DS2Warning]
  public func getSDKVersion() throws -> Swift.String
  public func cleanup() throws
  @objc deinit
}
